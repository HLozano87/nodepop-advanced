openapi: 3.0.4
info:
  title: Nodepop-API
  version: 1.0.0
  description: API RESTful para la gestión de productos, incluyendo relación con usuarios.

paths:
  /api/signup:
    post:
      summary: Registro de un nuevo usuario
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        "201":
          description: ""
        "400":
          description: ""
        "409":
          description: ""

  /api/login:
    post:
      summary: Iniciar sesión y obtener para token
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
              type: object
              properties:
                email:
                  type: string
                  example: string
                password:
                  type: string
                  example: string
      responses:
        "200":
          description: ""

  /api/products:
    get:
      summary: Obtener todos los productos con filtros opcionales
      tags:
        - products
      security:
        - Authorization: []
      parameters:
        - name: name
          in: query
          description: Filtra por nombre parcial (case-insensitive)
          required: false
          schema:
            type: string
        - name: priceMin
          in: query
          description: Precio mínimo
          required: false
          schema:
            type: number
        - name: priceMax
          in: query
          description: Precio máximo
          required: false
          schema:
            type: number
        - name: tags
          in: query
          description: Tags separados por comas
          required: false
          schema:
            type: string
        - name: owner
          in: query
          description: ID del usuario dueño del producto
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Lista de productos filtrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

    post:
      summary: Crear un nuevo producto
      tags:
        - products
      security:
        - Authorization: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - price
                - tags
              properties:
                name:
                  type: string
                price:
                  type: number
                  format: float
                  minimum: 1
                tags:
                  type: array
                  items:
                    type: string
                    enum: [work, mobile, motor, lifestyle]
                image:
                  type: string
                  format: binary
      responses:
        "201":
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /api/tags:
    get:
      summary: Obtener lista de tags disponibles
      tags:
        - products
      security:
        - Authorization: []
      responses:
        "200":
          description: Lista de tags válidos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum: [work, mobile, motor, lifestyle]
        "401":
          description: No autorizado - token no válido o ausente

  /api/products/{productId}:
    get:
      summary: Obtener un producto por ID
      tags:
        - products
      security:
        - Authorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Producto encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado

    put:
      summary: Actualizar un producto
      tags:
        - products
      security:
        - Authorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: benasar
                price:
                  type: number
                  format: float
                  minimum: 1
                  example: 1548.08
                tags:
                  type: array
                  items:
                    type: string
                    enum: [work, mobile, motor, lifestyle]
                  example: ["mobile", "work"]
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Producto no encontrado
    delete:
      summary: Eliminar un producto
      tags:
        - products
      security:
        - Authorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Producto eliminado correctamente
        "404":
          description: Producto no encontrado

components:
  schemas:
    Product:
      type: object
      required:
        - name
        - price
        - tags
      properties:
        _id:
          type: string
          example: "68610d63899cbaff67c9a0eb"
        name:
          type: string
          example: "benasar"
        owner:
          type: string
          example: "68610d63899cbaff67c9a0e6"
        price:
          type: number
          format: float
          minimum: 1
          example: 1548.08
        tags:
          type: array
          items:
            type: string
            enum: [work, mobile, motor, lifestyle]
          example: ["mobile", "lifestyle", "motor", "work"]
        image:
          type: string
          example: "1688123456789-product-image.jpg"
        thumbnail:
          type: string
          example: "1688123456789-product-image-thumbnail.jpg"
        __v:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
          example: "2025-06-29T09:54:43.698Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-06-29T09:54:43.698Z"

    SignUp:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"

    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string

        password:
          type: string

  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: Authorization
